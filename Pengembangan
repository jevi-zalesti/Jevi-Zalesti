!wget --no-check-certificate \
https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip

import os
import zipfile
local_zip = '/content/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()


import tensorflow as tf
import keras_preprocessing
from keras_preprocessing import image
from keras_preprocessing.image import ImageDataGenerator

BASIS_DIR = "/content/rockpaperscissors/rps-cv-images"
training_datagen = ImageDataGenerator(
    rescale = 1./255, rotation_range=40, width_shift_range=0.2,
    height_shift_range=0.2, zoom_range=0.2, horizontal_flip=True,
    fill_mode='nearest', validation_split=0.2
    )
    
    
    
train_generator = train_datagen.flow_from_directory(
  BASIS_DIR, target_size= (150,150), batch_size=4, class_mode='categorical', shuffle=True, subset = 'training'
  )

validation_generator = train_datagen.flow_from_directory(
  BASIS_DIR, target_size=(150,150), batch_size=4, class_mode='categorical', shuffle=True, subset = 'validation'
  )
  
  
  
  os.listdir(BASIS_DIR)
  
  
   model = tf.keras.models.Sequential ([

      tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
      tf.keras.layers.MaxPooling2D(2,2),

      tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
      tf.keras.layers.MaxPooling2D(2,2),
      
      tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
      tf.keras.layers.MaxPooling2D(2,2),

      tf.keras.layers.Flatten(),
      tf.keras.layers.Dropout(0.5),

      tf.keras.layers.Dense(128, activation='relu'),

      tf.keras.layers.Dense(512, activation='relu'),

      tf.keras.layers.Dense(3, activation='softmax'),
 ])

 model.summary()
 
 
 
 model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])
              
              
              
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.8):
      print("\n Akurasi telah mencapai >80%!")
      self.model.stop_training = True
callbacks = myCallback()



history = model.fit(
      train_generator,
      steps_per_epoch=25,
      epochs=20,
      validation_data=validation_generator,
      validation_steps=5,
      verbose=2, callbacks = [callbacks])
      
      
import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper right')
plt.show()



plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='lower left')
plt.show()



converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()



with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)
